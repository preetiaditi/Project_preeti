name: "CI/CD Pipeline"

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPO: vehicleproj

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPO: ${{ env.ECR_REPO }}
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" --region "$AWS_REGION" \
          || aws ecr create-repository --repository-name "$ECR_REPO" --region "$AWS_REGION"

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ env.ECR_REPO }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:latest"
          echo "CI: Building and pushing $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Debug ECR info
        run: |
          echo "Registry from login-ecr: ${{ steps.login-ecr.outputs.registry }}"
          aws ecr describe-repositories --region "${{ env.AWS_REGION }}"

      - name: Pull & run container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ env.ECR_REPO }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPO:latest"
          echo "CD: Pulling $IMAGE_URI"
          docker pull "$IMAGE_URI"

          echo "CD: Restarting container"
          docker stop myapp || true
          docker rm myapp || true

          # If you don't use MongoDB, we omit that env var
          docker run -d \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${AWS_REGION}" \
            -p 5000:5000 \
            --name myapp \
            "$IMAGE_URI"

          echo "CD: Done. Try curl http://localhost:5000 from the runner or open http://<EC2_PUBLIC_IP>:5000"
